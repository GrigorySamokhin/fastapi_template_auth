stages:
  - build
  - deploy

image: docker/compose:debian-1.29.1

variables:
  APP_PROD_IMAGE: ${CI_REGISTRY_IMAGE}/prod:${CI_PIPELINE_ID}
  APP_STAGE_IMAGE: ${CI_REGISTRY_IMAGE}/dev:${CI_PIPELINE_ID}
  GIT_SUBMODULE_STRATEGY: normal
  DOCKER_PORT: 8080

.tags: &tags
  tags:
    - glb-assembler-dev
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}

build stage:
  <<: *tags
  stage: build
  script:
    - docker build -t ${APP_STAGE_IMAGE} .
    #- docker push ${APP_STAGE_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "stage"'

build prod:
  <<: *tags
  stage: build
  script:
    - docker build -t ${APP_PROD_IMAGE} .
    #- docker push ${APP_PROD_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

deploy stage:
  <<: *tags
  stage: deploy
  variables:
    PORT: 8081
  script:
    - docker rm -f glb-assembler-${CI_PROJECT_NAME}-stage || true
    - docker run -d --name glb-assembler-${CI_PROJECT_NAME}-stage -p ${PORT}:${DOCKER_PORT} -e P_PORT=${PORT} ${APP_STAGE_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "stage"'
      when: manual

deploy prod:
  <<: *tags
  stage: deploy
  variables:
    PORT: 8080
  script:
    - docker rm -f glb-assembler-${CI_PROJECT_NAME}-prod || true
    - docker run -d --name glb-assembler-${CI_PROJECT_NAME}-prod -p ${PORT}:${DOCKER_PORT} -e P_PORT=${PORT} ${APP_PROD_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual



